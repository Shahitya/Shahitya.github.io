{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FlaskRESTPlus Flask-RESTPlus is an extension for Flask that adds support for quickly building REST APIs. Flask-RESTPlus encourages best practices with minimal setup. If you are familiar with Flask, Flask-RESTPlus should be easy to pick up. It provides a coherent collection of decorators and tools to describe your API and expose its documentation properly (using Swagger). Compatibility Flask-RESTPlus requires Python 2.7+. Documentation Overview Installation Quick Start Initialization A Minimal API","title":"Home"},{"location":"#flaskrestplus","text":"Flask-RESTPlus is an extension for Flask that adds support for quickly building REST APIs. Flask-RESTPlus encourages best practices with minimal setup. If you are familiar with Flask, Flask-RESTPlus should be easy to pick up. It provides a coherent collection of decorators and tools to describe your API and expose its documentation properly (using Swagger).","title":"FlaskRESTPlus"},{"location":"#compatibility","text":"Flask-RESTPlus requires Python 2.7+.","title":"Compatibility"},{"location":"#documentation-overview","text":"Installation Quick Start Initialization A Minimal API","title":"Documentation Overview"},{"location":"installation/","text":"Installation Install Flask-RESTPlus with pip: pip install flask-restplus The development version can be downloaded from Github . git clone https://github.com/noirbizarre/flask-restplus.git cd flask-restplus pip install -e .[dev,test] Flask-RESTPlus requires Python version 2.7, 3.3, 3.4 or 3.5. It\u2019s also working with PyPy and PyPy3.","title":"Installation"},{"location":"installation/#installation","text":"Install Flask-RESTPlus with pip: pip install flask-restplus The development version can be downloaded from Github . git clone https://github.com/noirbizarre/flask-restplus.git cd flask-restplus pip install -e .[dev,test] Flask-RESTPlus requires Python version 2.7, 3.3, 3.4 or 3.5. It\u2019s also working with PyPy and PyPy3.","title":"Installation"},{"location":"quickstart/","text":"Quick Start This guide assumes you have a working understanding of Flask, and that you have already installed both Flask and Flask-RESTPlus. If not, then follow the steps in the Installation section. Initilization As every other extension, you can initialize it with an application object: from flask import Flask from flask_restplus import Api app = Flask(__name__) api = Api(app) or lazily with the factory pattern: from flask import Flask from flask_restplus import Api api = Api() app = Flask(__name__) api.init_app(app) A Minimal API A minimal Flask-RESTPlus API looks like this: from flask import Flask from flask_restplus import Resource, Api app = Flask(__name__) api = Api(app) @api.route('/hello') class HelloWorld(Resource): def get(self): return {'hello': 'world'} if __name__ == '__main__': app.run(debug=True) Save this as api.py and run it using your Python interpreter. Note that we\u2019ve enabled Flask debugging mode to provide code reloading and better error messages. $ python api.py * Running on http://127.0.0.1:5000/ * Restarting with reloader Warning: Debug mode should never be used in a production environment!","title":"Quick start"},{"location":"quickstart/#quick-start","text":"This guide assumes you have a working understanding of Flask, and that you have already installed both Flask and Flask-RESTPlus. If not, then follow the steps in the Installation section.","title":"Quick Start"},{"location":"quickstart/#initilization","text":"As every other extension, you can initialize it with an application object: from flask import Flask from flask_restplus import Api app = Flask(__name__) api = Api(app) or lazily with the factory pattern: from flask import Flask from flask_restplus import Api api = Api() app = Flask(__name__) api.init_app(app)","title":"Initilization"},{"location":"quickstart/#a-minimal-api","text":"A minimal Flask-RESTPlus API looks like this: from flask import Flask from flask_restplus import Resource, Api app = Flask(__name__) api = Api(app) @api.route('/hello') class HelloWorld(Resource): def get(self): return {'hello': 'world'} if __name__ == '__main__': app.run(debug=True) Save this as api.py and run it using your Python interpreter. Note that we\u2019ve enabled Flask debugging mode to provide code reloading and better error messages. $ python api.py * Running on http://127.0.0.1:5000/ * Restarting with reloader Warning: Debug mode should never be used in a production environment!","title":"A Minimal API"}]}